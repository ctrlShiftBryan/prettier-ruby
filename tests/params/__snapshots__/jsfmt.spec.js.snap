// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`block.rb 1`] = `
def method_receiving_block(&block)
  block.call
end

def method_passing_block(&block)
  other(&block)
end

def method_passing_block_with_arguments(&block)
  other(1, 2, 3, &block)
end
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def method_receiving_block(&block)
  block.call
end
def method_passing_block(&block)
  other(&block)
end
def method_passing_block_with_arguments(&block)
  other(1, 2, 3, &block)
end

`;

exports[`default_values.rb 1`] = `
def join(array, separator = ",")
  array.join(separator)
end
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def join(array, separator = ',')
  array.join(separator)
end

`;

exports[`optional_keyword_arguments.rb 1`] = `
def find_file_upwards(filename, start_dir, use_home: false)
  if use_home
    puts filename
  end
end
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def find_file_upwards(filename, start_dir, use_home: false)
  puts filename if use_home
end

`;

exports[`required_keyword_arguments.rb 1`] = `
def add(x:, y:)
  x + y
end

add(x: 10, y: 20)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def add(x:, y:)
  x + y
end
add(x: 10, y: 20)

`;

exports[`splat.rb 1`] = `
splat(*splat1)
splat(1, 2, 3, *splat1)
splat(1, 2, 3, *splat1, *splat2)

double_splat(**splat_splat1)
double_splat(1, 2, 3, **splat_splat1)
double_splat(1, 2, 3, **splat_splat1, **splat_splat2)

all_with_args(1, 2, 3, *splat, **splat_splat)
all_with_args_and_block(1, 2, 3, *splat1, **splat_splat1, &block)
all_with_args_and_block(1, 2, 3, *splat1, *splat2, *splat3, **splat_splat1, **splat_splat2, **splat_splat3, &block)

def foo(arg1, *splat, **splat_splat)

end
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
splat(*splat1)
splat(1, 2, 3, *splat1)
splat(1, 2, 3, *splat1, *splat2)
double_splat(**splat_splat1)
double_splat(1, 2, 3, **splat_splat1)
double_splat(1, 2, 3, **splat_splat1, **splat_splat2)
all_with_args(1, 2, 3, *splat, **splat_splat)
all_with_args_and_block(1, 2, 3, *splat1, **splat_splat1, &block)
all_with_args_and_block(1, 2, 3, *splat1, *splat2,
*splat3,
**splat_splat1,
**splat_splat2,
**splat_splat3,
&block)
def foo(arg1, *splat, **splat_splat)

end

`;

exports[`to_proc.rb 1`] = `
models.map { |model| model.uuid }
models.map(&:uuid)
models.map &:uuid

[1, 2, 3].inject(&:+)
[1, 2, 3].inject &:+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
models.map { |model| model.uuid }
models.map(&:uuid)
models.map &:uuid
[1, 2, 3].inject(&:+)
[1, 2, 3].inject &:+

`;
